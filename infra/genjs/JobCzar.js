//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

JobCzar_fetchWork_args = function(args) {
  this.worker_name = null;
  this.instance_id = null;
  if (args) {
    if (args.worker_name !== undefined && args.worker_name !== null) {
      this.worker_name = args.worker_name;
    }
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
  }
};
JobCzar_fetchWork_args.prototype = {};
JobCzar_fetchWork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.worker_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.instance_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_fetchWork_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_fetchWork_args');
  if (this.worker_name !== null && this.worker_name !== undefined) {
    output.writeFieldBegin('worker_name', Thrift.Type.STRING, 1);
    output.writeString(this.worker_name);
    output.writeFieldEnd();
  }
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.I32, 2);
    output.writeI32(this.instance_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_fetchWork_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Job(args.success);
    }
  }
};
JobCzar_fetchWork_result.prototype = {};
JobCzar_fetchWork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Job();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_fetchWork_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_fetchWork_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_submitResult_args = function(args) {
  this.result = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new ResultJob(args.result);
    }
  }
};
JobCzar_submitResult_args.prototype = {};
JobCzar_submitResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ResultJob();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_submitResult_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_submitResult_args');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_submitResult_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
JobCzar_submitResult_result.prototype = {};
JobCzar_submitResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_submitResult_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_submitResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_addJob_args = function(args) {
  this.agent_id = null;
  this.world_id = null;
  this.agent_param = null;
  this.world_param = null;
  this.priority = null;
  this.user_id = null;
  this.note = null;
  if (args) {
    if (args.agent_id !== undefined && args.agent_id !== null) {
      this.agent_id = args.agent_id;
    }
    if (args.world_id !== undefined && args.world_id !== null) {
      this.world_id = args.world_id;
    }
    if (args.agent_param !== undefined && args.agent_param !== null) {
      this.agent_param = args.agent_param;
    }
    if (args.world_param !== undefined && args.world_param !== null) {
      this.world_param = args.world_param;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.note !== undefined && args.note !== null) {
      this.note = args.note;
    }
  }
};
JobCzar_addJob_args.prototype = {};
JobCzar_addJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.agent_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.world_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.agent_param = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.world_param = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.user_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.note = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_addJob_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_addJob_args');
  if (this.agent_id !== null && this.agent_id !== undefined) {
    output.writeFieldBegin('agent_id', Thrift.Type.I32, 1);
    output.writeI32(this.agent_id);
    output.writeFieldEnd();
  }
  if (this.world_id !== null && this.world_id !== undefined) {
    output.writeFieldBegin('world_id', Thrift.Type.I32, 2);
    output.writeI32(this.world_id);
    output.writeFieldEnd();
  }
  if (this.agent_param !== null && this.agent_param !== undefined) {
    output.writeFieldBegin('agent_param', Thrift.Type.STRING, 3);
    output.writeString(this.agent_param);
    output.writeFieldEnd();
  }
  if (this.world_param !== null && this.world_param !== undefined) {
    output.writeFieldBegin('world_param', Thrift.Type.STRING, 4);
    output.writeString(this.world_param);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 5);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I32, 6);
    output.writeI32(this.user_id);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRING, 7);
    output.writeString(this.note);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_addJob_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
JobCzar_addJob_result.prototype = {};
JobCzar_addJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_addJob_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_addJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_fetchRunResults_args = function(args) {
  this.job_id = null;
  if (args) {
    if (args.job_id !== undefined && args.job_id !== null) {
      this.job_id = args.job_id;
    }
  }
};
JobCzar_fetchRunResults_args.prototype = {};
JobCzar_fetchRunResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.job_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_fetchRunResults_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_fetchRunResults_args');
  if (this.job_id !== null && this.job_id !== undefined) {
    output.writeFieldBegin('job_id', Thrift.Type.I32, 1);
    output.writeI32(this.job_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_fetchRunResults_result = function(args) {
};
JobCzar_fetchRunResults_result.prototype = {};
JobCzar_fetchRunResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_fetchRunResults_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_fetchRunResults_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_updateNote_args = function(args) {
  this.job_id = null;
  this.note = null;
  if (args) {
    if (args.job_id !== undefined && args.job_id !== null) {
      this.job_id = args.job_id;
    }
    if (args.note !== undefined && args.note !== null) {
      this.note = args.note;
    }
  }
};
JobCzar_updateNote_args.prototype = {};
JobCzar_updateNote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.job_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.note = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_updateNote_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_updateNote_args');
  if (this.job_id !== null && this.job_id !== undefined) {
    output.writeFieldBegin('job_id', Thrift.Type.I32, 1);
    output.writeI32(this.job_id);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRING, 2);
    output.writeString(this.note);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_updateNote_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
JobCzar_updateNote_result.prototype = {};
JobCzar_updateNote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_updateNote_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_updateNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_getBinInfo_args = function(args) {
  this.bin_id = null;
  if (args) {
    if (args.bin_id !== undefined && args.bin_id !== null) {
      this.bin_id = args.bin_id;
    }
  }
};
JobCzar_getBinInfo_args.prototype = {};
JobCzar_getBinInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bin_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_getBinInfo_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_getBinInfo_args');
  if (this.bin_id !== null && this.bin_id !== undefined) {
    output.writeFieldBegin('bin_id', Thrift.Type.I32, 1);
    output.writeI32(this.bin_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_getBinInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BinInfo(args.success);
    }
  }
};
JobCzar_getBinInfo_result.prototype = {};
JobCzar_getBinInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BinInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_getBinInfo_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_getBinInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_getBinInfos_args = function(args) {
  this.filter_by = null;
  if (args) {
    if (args.filter_by !== undefined && args.filter_by !== null) {
      this.filter_by = args.filter_by;
    }
  }
};
JobCzar_getBinInfos_args.prototype = {};
JobCzar_getBinInfos_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filter_by = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_getBinInfos_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_getBinInfos_args');
  if (this.filter_by !== null && this.filter_by !== undefined) {
    output.writeFieldBegin('filter_by', Thrift.Type.STRING, 1);
    output.writeString(this.filter_by);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_getBinInfos_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [BinInfo]);
    }
  }
};
JobCzar_getBinInfos_result.prototype = {};
JobCzar_getBinInfos_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new BinInfo();
          elem3.read(input);
          this.success.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_getBinInfos_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_getBinInfos_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_runSQL_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
JobCzar_runSQL_args.prototype = {};
JobCzar_runSQL_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_runSQL_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_runSQL_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_runSQL_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Thrift.copyMap, null]);
    }
  }
};
JobCzar_runSQL_result.prototype = {};
JobCzar_runSQL_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = {};
          var _rtmp310 = input.readMapBegin();
          var _size9 = _rtmp310.size || 0;
          for (var _i11 = 0; _i11 < _size9; ++_i11) {
            if (_i11 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key12 = null;
            var val13 = null;
            key12 = input.readString().value;
            val13 = input.readString().value;
            elem8[key12] = val13;
          }
          input.readMapEnd();
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_runSQL_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_runSQL_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.MAP, this.success.length);
    for (var iter14 in this.success) {
      if (this.success.hasOwnProperty(iter14)) {
        iter14 = this.success[iter14];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter14));
        for (var kiter15 in iter14) {
          if (iter14.hasOwnProperty(kiter15)) {
            var viter16 = iter14[kiter15];
            output.writeString(kiter15);
            output.writeString(viter16);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_removeJob_args = function(args) {
  this.job_id = null;
  if (args) {
    if (args.job_id !== undefined && args.job_id !== null) {
      this.job_id = args.job_id;
    }
  }
};
JobCzar_removeJob_args.prototype = {};
JobCzar_removeJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.job_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_removeJob_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_removeJob_args');
  if (this.job_id !== null && this.job_id !== undefined) {
    output.writeFieldBegin('job_id', Thrift.Type.I32, 1);
    output.writeI32(this.job_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_removeJob_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
JobCzar_removeJob_result.prototype = {};
JobCzar_removeJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_removeJob_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_removeJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_queryJobs_args = function(args) {
  this.filter_by = null;
  if (args) {
    if (args.filter_by !== undefined && args.filter_by !== null) {
      this.filter_by = args.filter_by;
    }
  }
};
JobCzar_queryJobs_args.prototype = {};
JobCzar_queryJobs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filter_by = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_queryJobs_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_queryJobs_args');
  if (this.filter_by !== null && this.filter_by !== undefined) {
    output.writeFieldBegin('filter_by', Thrift.Type.STRING, 1);
    output.writeString(this.filter_by);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_queryJobs_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [JobInfo]);
    }
  }
};
JobCzar_queryJobs_result.prototype = {};
JobCzar_queryJobs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp318 = input.readListBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var elem20 = null;
          elem20 = new JobInfo();
          elem20.read(input);
          this.success.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_queryJobs_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_queryJobs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter21 in this.success) {
      if (this.success.hasOwnProperty(iter21)) {
        iter21 = this.success[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_stopJob_args = function(args) {
  this.job_id = null;
  if (args) {
    if (args.job_id !== undefined && args.job_id !== null) {
      this.job_id = args.job_id;
    }
  }
};
JobCzar_stopJob_args.prototype = {};
JobCzar_stopJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.job_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_stopJob_args.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_stopJob_args');
  if (this.job_id !== null && this.job_id !== undefined) {
    output.writeFieldBegin('job_id', Thrift.Type.I32, 1);
    output.writeI32(this.job_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzar_stopJob_result = function(args) {
};
JobCzar_stopJob_result.prototype = {};
JobCzar_stopJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobCzar_stopJob_result.prototype.write = function(output) {
  output.writeStructBegin('JobCzar_stopJob_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobCzarClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
JobCzarClient.prototype = {};

JobCzarClient.prototype.fetchWork = function(worker_name, instance_id, callback) {
  this.send_fetchWork(worker_name, instance_id, callback); 
  if (!callback) {
    return this.recv_fetchWork();
  }
};

JobCzarClient.prototype.send_fetchWork = function(worker_name, instance_id, callback) {
  var params = {
    worker_name: worker_name,
    instance_id: instance_id
  };
  var args = new JobCzar_fetchWork_args(params);
  try {
    this.output.writeMessageBegin('fetchWork', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_fetchWork();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_fetchWork = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_fetchWork_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchWork failed: unknown result';
};

JobCzarClient.prototype.submitResult = function(result, callback) {
  this.send_submitResult(result, callback); 
  if (!callback) {
    return this.recv_submitResult();
  }
};

JobCzarClient.prototype.send_submitResult = function(result, callback) {
  var params = {
    result: result
  };
  var args = new JobCzar_submitResult_args(params);
  try {
    this.output.writeMessageBegin('submitResult', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_submitResult();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_submitResult = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_submitResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'submitResult failed: unknown result';
};

JobCzarClient.prototype.addJob = function(agent_id, world_id, agent_param, world_param, priority, user_id, note, callback) {
  this.send_addJob(agent_id, world_id, agent_param, world_param, priority, user_id, note, callback); 
  if (!callback) {
    return this.recv_addJob();
  }
};

JobCzarClient.prototype.send_addJob = function(agent_id, world_id, agent_param, world_param, priority, user_id, note, callback) {
  var params = {
    agent_id: agent_id,
    world_id: world_id,
    agent_param: agent_param,
    world_param: world_param,
    priority: priority,
    user_id: user_id,
    note: note
  };
  var args = new JobCzar_addJob_args(params);
  try {
    this.output.writeMessageBegin('addJob', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addJob();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_addJob = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_addJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addJob failed: unknown result';
};

JobCzarClient.prototype.fetchRunResults = function(job_id, callback) {
  this.send_fetchRunResults(job_id, callback); 
  if (!callback) {
  this.recv_fetchRunResults();
  }
};

JobCzarClient.prototype.send_fetchRunResults = function(job_id, callback) {
  var params = {
    job_id: job_id
  };
  var args = new JobCzar_fetchRunResults_args(params);
  try {
    this.output.writeMessageBegin('fetchRunResults', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_fetchRunResults();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_fetchRunResults = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_fetchRunResults_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

JobCzarClient.prototype.updateNote = function(job_id, note, callback) {
  this.send_updateNote(job_id, note, callback); 
  if (!callback) {
    return this.recv_updateNote();
  }
};

JobCzarClient.prototype.send_updateNote = function(job_id, note, callback) {
  var params = {
    job_id: job_id,
    note: note
  };
  var args = new JobCzar_updateNote_args(params);
  try {
    this.output.writeMessageBegin('updateNote', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateNote();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_updateNote = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_updateNote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateNote failed: unknown result';
};

JobCzarClient.prototype.getBinInfo = function(bin_id, callback) {
  this.send_getBinInfo(bin_id, callback); 
  if (!callback) {
    return this.recv_getBinInfo();
  }
};

JobCzarClient.prototype.send_getBinInfo = function(bin_id, callback) {
  var params = {
    bin_id: bin_id
  };
  var args = new JobCzar_getBinInfo_args(params);
  try {
    this.output.writeMessageBegin('getBinInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getBinInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_getBinInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_getBinInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getBinInfo failed: unknown result';
};

JobCzarClient.prototype.getBinInfos = function(filter_by, callback) {
  this.send_getBinInfos(filter_by, callback); 
  if (!callback) {
    return this.recv_getBinInfos();
  }
};

JobCzarClient.prototype.send_getBinInfos = function(filter_by, callback) {
  var params = {
    filter_by: filter_by
  };
  var args = new JobCzar_getBinInfos_args(params);
  try {
    this.output.writeMessageBegin('getBinInfos', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getBinInfos();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_getBinInfos = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_getBinInfos_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getBinInfos failed: unknown result';
};

JobCzarClient.prototype.runSQL = function(query, callback) {
  this.send_runSQL(query, callback); 
  if (!callback) {
    return this.recv_runSQL();
  }
};

JobCzarClient.prototype.send_runSQL = function(query, callback) {
  var params = {
    query: query
  };
  var args = new JobCzar_runSQL_args(params);
  try {
    this.output.writeMessageBegin('runSQL', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_runSQL();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_runSQL = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_runSQL_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'runSQL failed: unknown result';
};

JobCzarClient.prototype.removeJob = function(job_id, callback) {
  this.send_removeJob(job_id, callback); 
  if (!callback) {
    return this.recv_removeJob();
  }
};

JobCzarClient.prototype.send_removeJob = function(job_id, callback) {
  var params = {
    job_id: job_id
  };
  var args = new JobCzar_removeJob_args(params);
  try {
    this.output.writeMessageBegin('removeJob', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_removeJob();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_removeJob = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_removeJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'removeJob failed: unknown result';
};

JobCzarClient.prototype.queryJobs = function(filter_by, callback) {
  this.send_queryJobs(filter_by, callback); 
  if (!callback) {
    return this.recv_queryJobs();
  }
};

JobCzarClient.prototype.send_queryJobs = function(filter_by, callback) {
  var params = {
    filter_by: filter_by
  };
  var args = new JobCzar_queryJobs_args(params);
  try {
    this.output.writeMessageBegin('queryJobs', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_queryJobs();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_queryJobs = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_queryJobs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'queryJobs failed: unknown result';
};

JobCzarClient.prototype.stopJob = function(job_id, callback) {
  this.send_stopJob(job_id, callback); 
  if (!callback) {
  this.recv_stopJob();
  }
};

JobCzarClient.prototype.send_stopJob = function(job_id, callback) {
  var params = {
    job_id: job_id
  };
  var args = new JobCzar_stopJob_args(params);
  try {
    this.output.writeMessageBegin('stopJob', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_stopJob();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

JobCzarClient.prototype.recv_stopJob = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new JobCzar_stopJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
