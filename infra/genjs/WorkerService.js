//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

WorkerService_stopJob_args = function(args) {
  this.job_id = null;
  if (args) {
    if (args.job_id !== undefined && args.job_id !== null) {
      this.job_id = args.job_id;
    }
  }
};
WorkerService_stopJob_args.prototype = {};
WorkerService_stopJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.job_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkerService_stopJob_args.prototype.write = function(output) {
  output.writeStructBegin('WorkerService_stopJob_args');
  if (this.job_id !== null && this.job_id !== undefined) {
    output.writeFieldBegin('job_id', Thrift.Type.I32, 1);
    output.writeI32(this.job_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkerService_stopJob_result = function(args) {
};
WorkerService_stopJob_result.prototype = {};
WorkerService_stopJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkerService_stopJob_result.prototype.write = function(output) {
  output.writeStructBegin('WorkerService_stopJob_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkerService_sendResults_args = function(args) {
  this.job_id = null;
  if (args) {
    if (args.job_id !== undefined && args.job_id !== null) {
      this.job_id = args.job_id;
    }
  }
};
WorkerService_sendResults_args.prototype = {};
WorkerService_sendResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.job_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkerService_sendResults_args.prototype.write = function(output) {
  output.writeStructBegin('WorkerService_sendResults_args');
  if (this.job_id !== null && this.job_id !== undefined) {
    output.writeFieldBegin('job_id', Thrift.Type.I32, 1);
    output.writeI32(this.job_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkerService_sendResults_result = function(args) {
};
WorkerService_sendResults_result.prototype = {};
WorkerService_sendResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkerService_sendResults_result.prototype.write = function(output) {
  output.writeStructBegin('WorkerService_sendResults_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkerServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
WorkerServiceClient.prototype = {};

WorkerServiceClient.prototype.stopJob = function(job_id, callback) {
  this.send_stopJob(job_id, callback); 
  if (!callback) {
  this.recv_stopJob();
  }
};

WorkerServiceClient.prototype.send_stopJob = function(job_id, callback) {
  var params = {
    job_id: job_id
  };
  var args = new WorkerService_stopJob_args(params);
  try {
    this.output.writeMessageBegin('stopJob', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_stopJob();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

WorkerServiceClient.prototype.recv_stopJob = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WorkerService_stopJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

WorkerServiceClient.prototype.sendResults = function(job_id, callback) {
  this.send_sendResults(job_id, callback); 
  if (!callback) {
  this.recv_sendResults();
  }
};

WorkerServiceClient.prototype.send_sendResults = function(job_id, callback) {
  var params = {
    job_id: job_id
  };
  var args = new WorkerService_sendResults_args(params);
  try {
    this.output.writeMessageBegin('sendResults', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendResults();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

WorkerServiceClient.prototype.recv_sendResults = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WorkerService_sendResults_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
