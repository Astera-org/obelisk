// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package infra

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - JobID
//  - AgentName
//  - WorldName
type Job struct {
  JobID int32 `thrift:"jobID,1" db:"jobID" json:"jobID"`
  AgentName string `thrift:"agentName,2" db:"agentName" json:"agentName"`
  WorldName string `thrift:"worldName,3" db:"worldName" json:"worldName"`
}

func NewJob() *Job {
  return &Job{}
}


func (p *Job) GetJobID() int32 {
  return p.JobID
}

func (p *Job) GetAgentName() string {
  return p.AgentName
}

func (p *Job) GetWorldName() string {
  return p.WorldName
}
func (p *Job) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Job)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *Job)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AgentName = v
}
  return nil
}

func (p *Job)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WorldName = v
}
  return nil
}

func (p *Job) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Job"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Job) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobID: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobID: ", p), err) }
  return err
}

func (p *Job) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agentName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentName: ", p), err) }
  if err := oprot.WriteString(string(p.AgentName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentName: ", p), err) }
  return err
}

func (p *Job) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("worldName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:worldName: ", p), err) }
  if err := oprot.WriteString(string(p.WorldName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.worldName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:worldName: ", p), err) }
  return err
}

func (p *Job) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Job(%+v)", *p)
}

// Attributes:
//  - JobID
//  - Cycles
//  - TimeStart
//  - TimeStop
//  - Score
//  - WorkerName
//  - InstanceName
type WorkResult_ struct {
  JobID int32 `thrift:"jobID,1" db:"jobID" json:"jobID"`
  Cycles int32 `thrift:"cycles,2" db:"cycles" json:"cycles"`
  TimeStart int32 `thrift:"timeStart,3" db:"timeStart" json:"timeStart"`
  TimeStop int32 `thrift:"timeStop,4" db:"timeStop" json:"timeStop"`
  Score float64 `thrift:"score,5" db:"score" json:"score"`
  // unused fields # 6 to 10
  WorkerName string `thrift:"workerName,11" db:"workerName" json:"workerName"`
  InstanceName string `thrift:"instanceName,12" db:"instanceName" json:"instanceName"`
}

func NewWorkResult_() *WorkResult_ {
  return &WorkResult_{}
}


func (p *WorkResult_) GetJobID() int32 {
  return p.JobID
}

func (p *WorkResult_) GetCycles() int32 {
  return p.Cycles
}

func (p *WorkResult_) GetTimeStart() int32 {
  return p.TimeStart
}

func (p *WorkResult_) GetTimeStop() int32 {
  return p.TimeStop
}

func (p *WorkResult_) GetScore() float64 {
  return p.Score
}

func (p *WorkResult_) GetWorkerName() string {
  return p.WorkerName
}

func (p *WorkResult_) GetInstanceName() string {
  return p.InstanceName
}
func (p *WorkResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *WorkResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cycles = v
}
  return nil
}

func (p *WorkResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeStart = v
}
  return nil
}

func (p *WorkResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TimeStop = v
}
  return nil
}

func (p *WorkResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Score = v
}
  return nil
}

func (p *WorkResult_)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.WorkerName = v
}
  return nil
}

func (p *WorkResult_)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.InstanceName = v
}
  return nil
}

func (p *WorkResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobID: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobID: ", p), err) }
  return err
}

func (p *WorkResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cycles", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cycles: ", p), err) }
  if err := oprot.WriteI32(int32(p.Cycles)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cycles (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cycles: ", p), err) }
  return err
}

func (p *WorkResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeStart", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeStart: ", p), err) }
  if err := oprot.WriteI32(int32(p.TimeStart)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeStart (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeStart: ", p), err) }
  return err
}

func (p *WorkResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeStop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeStop: ", p), err) }
  if err := oprot.WriteI32(int32(p.TimeStop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeStop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeStop: ", p), err) }
  return err
}

func (p *WorkResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:score: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Score)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.score (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:score: ", p), err) }
  return err
}

func (p *WorkResult_) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workerName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:workerName: ", p), err) }
  if err := oprot.WriteString(string(p.WorkerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workerName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:workerName: ", p), err) }
  return err
}

func (p *WorkResult_) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("instanceName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:instanceName: ", p), err) }
  if err := oprot.WriteString(string(p.InstanceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instanceName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:instanceName: ", p), err) }
  return err
}

func (p *WorkResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkResult_(%+v)", *p)
}

type JobCzar interface {
  // Parameters:
  //  - WorkerName
  //  - InstanceName
  FetchWork(ctx context.Context, workerName string, instanceName string) (r *Job, err error)
  // Parameters:
  //  - Result_
  SubmitResult_(ctx context.Context, result *WorkResult_) (r bool, err error)
}

type JobCzarClient struct {
  c thrift.TClient
}

func NewJobCzarClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *JobCzarClient {
  return &JobCzarClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewJobCzarClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *JobCzarClient {
  return &JobCzarClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewJobCzarClient(c thrift.TClient) *JobCzarClient {
  return &JobCzarClient{
    c: c,
  }
}

func (p *JobCzarClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - WorkerName
//  - InstanceName
func (p *JobCzarClient) FetchWork(ctx context.Context, workerName string, instanceName string) (r *Job, err error) {
  var _args0 JobCzarFetchWorkArgs
  _args0.WorkerName = workerName
  _args0.InstanceName = instanceName
  var _result1 JobCzarFetchWorkResult
  if err = p.Client_().Call(ctx, "fetchWork", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Result_
func (p *JobCzarClient) SubmitResult_(ctx context.Context, result *WorkResult_) (r bool, err error) {
  var _args2 JobCzarSubmitResultArgs
  _args2.Result_ = result
  var _result3 JobCzarSubmitResultResult
  if err = p.Client_().Call(ctx, "submitResult", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type JobCzarProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler JobCzar
}

func (p *JobCzarProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *JobCzarProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *JobCzarProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewJobCzarProcessor(handler JobCzar) *JobCzarProcessor {

  self4 := &JobCzarProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["fetchWork"] = &jobCzarProcessorFetchWork{handler:handler}
  self4.processorMap["submitResult"] = &jobCzarProcessorSubmitResult_{handler:handler}
return self4
}

func (p *JobCzarProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type jobCzarProcessorFetchWork struct {
  handler JobCzar
}

func (p *jobCzarProcessorFetchWork) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarFetchWorkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchWork", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JobCzarFetchWorkResult{}
var retval *Job
  var err2 error
  if retval, err2 = p.handler.FetchWork(ctx, args.WorkerName, args.InstanceName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchWork: " + err2.Error())
    oprot.WriteMessageBegin("fetchWork", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchWork", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorSubmitResult_ struct {
  handler JobCzar
}

func (p *jobCzarProcessorSubmitResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarSubmitResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("submitResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := JobCzarSubmitResultResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SubmitResult_(ctx, args.Result_); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submitResult: " + err2.Error())
    oprot.WriteMessageBegin("submitResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("submitResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - WorkerName
//  - InstanceName
type JobCzarFetchWorkArgs struct {
  WorkerName string `thrift:"workerName,1" db:"workerName" json:"workerName"`
  InstanceName string `thrift:"instanceName,2" db:"instanceName" json:"instanceName"`
}

func NewJobCzarFetchWorkArgs() *JobCzarFetchWorkArgs {
  return &JobCzarFetchWorkArgs{}
}


func (p *JobCzarFetchWorkArgs) GetWorkerName() string {
  return p.WorkerName
}

func (p *JobCzarFetchWorkArgs) GetInstanceName() string {
  return p.InstanceName
}
func (p *JobCzarFetchWorkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarFetchWorkArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WorkerName = v
}
  return nil
}

func (p *JobCzarFetchWorkArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InstanceName = v
}
  return nil
}

func (p *JobCzarFetchWorkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchWork_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarFetchWorkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workerName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:workerName: ", p), err) }
  if err := oprot.WriteString(string(p.WorkerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workerName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:workerName: ", p), err) }
  return err
}

func (p *JobCzarFetchWorkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("instanceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:instanceName: ", p), err) }
  if err := oprot.WriteString(string(p.InstanceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instanceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:instanceName: ", p), err) }
  return err
}

func (p *JobCzarFetchWorkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarFetchWorkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarFetchWorkResult struct {
  Success *Job `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarFetchWorkResult() *JobCzarFetchWorkResult {
  return &JobCzarFetchWorkResult{}
}

var JobCzarFetchWorkResult_Success_DEFAULT *Job
func (p *JobCzarFetchWorkResult) GetSuccess() *Job {
  if !p.IsSetSuccess() {
    return JobCzarFetchWorkResult_Success_DEFAULT
  }
return p.Success
}
func (p *JobCzarFetchWorkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarFetchWorkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarFetchWorkResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Job{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *JobCzarFetchWorkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchWork_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarFetchWorkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarFetchWorkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarFetchWorkResult(%+v)", *p)
}

// Attributes:
//  - Result_
type JobCzarSubmitResultArgs struct {
  Result_ *WorkResult_ `thrift:"result,1" db:"result" json:"result"`
}

func NewJobCzarSubmitResultArgs() *JobCzarSubmitResultArgs {
  return &JobCzarSubmitResultArgs{}
}

var JobCzarSubmitResultArgs_Result__DEFAULT *WorkResult_
func (p *JobCzarSubmitResultArgs) GetResult_() *WorkResult_ {
  if !p.IsSetResult_() {
    return JobCzarSubmitResultArgs_Result__DEFAULT
  }
return p.Result_
}
func (p *JobCzarSubmitResultArgs) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *JobCzarSubmitResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarSubmitResultArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Result_ = &WorkResult_{}
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *JobCzarSubmitResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarSubmitResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *JobCzarSubmitResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarSubmitResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarSubmitResultResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarSubmitResultResult() *JobCzarSubmitResultResult {
  return &JobCzarSubmitResultResult{}
}

var JobCzarSubmitResultResult_Success_DEFAULT bool
func (p *JobCzarSubmitResultResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return JobCzarSubmitResultResult_Success_DEFAULT
  }
return *p.Success
}
func (p *JobCzarSubmitResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarSubmitResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarSubmitResultResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JobCzarSubmitResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarSubmitResultResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarSubmitResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarSubmitResultResult(%+v)", *p)
}


