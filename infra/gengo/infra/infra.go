// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package infra

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - JobID
//  - AgentID
//  - WorldID
//  - AgentParam
//  - WorldParam
type Job struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
  AgentID int32 `thrift:"agent_id,2" db:"agent_id" json:"agent_id"`
  WorldID int32 `thrift:"world_id,3" db:"world_id" json:"world_id"`
  AgentParam string `thrift:"agent_param,4" db:"agent_param" json:"agent_param"`
  WorldParam string `thrift:"world_param,5" db:"world_param" json:"world_param"`
}

func NewJob() *Job {
  return &Job{}
}


func (p *Job) GetJobID() int32 {
  return p.JobID
}

func (p *Job) GetAgentID() int32 {
  return p.AgentID
}

func (p *Job) GetWorldID() int32 {
  return p.WorldID
}

func (p *Job) GetAgentParam() string {
  return p.AgentParam
}

func (p *Job) GetWorldParam() string {
  return p.WorldParam
}
func (p *Job) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Job)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *Job)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AgentID = v
}
  return nil
}

func (p *Job)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WorldID = v
}
  return nil
}

func (p *Job)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AgentParam = v
}
  return nil
}

func (p *Job)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WorldParam = v
}
  return nil
}

func (p *Job) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Job"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Job) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *Job) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agent_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AgentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agent_id: ", p), err) }
  return err
}

func (p *Job) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "world_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:world_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.WorldID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.world_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:world_id: ", p), err) }
  return err
}

func (p *Job) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_param", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:agent_param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_param (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:agent_param: ", p), err) }
  return err
}

func (p *Job) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "world_param", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:world_param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WorldParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.world_param (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:world_param: ", p), err) }
  return err
}

func (p *Job) Equals(other *Job) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JobID != other.JobID { return false }
  if p.AgentID != other.AgentID { return false }
  if p.WorldID != other.WorldID { return false }
  if p.AgentParam != other.AgentParam { return false }
  if p.WorldParam != other.WorldParam { return false }
  return true
}

func (p *Job) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Job(%+v)", *p)
}

// Attributes:
//  - JobID
//  - Status
//  - Seconds
//  - Steps
//  - Cycles
//  - Score
//  - WorkerName
//  - InstanceName
type ResultJob struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
  Status int32 `thrift:"status,2" db:"status" json:"status"`
  Seconds int32 `thrift:"seconds,3" db:"seconds" json:"seconds"`
  Steps int32 `thrift:"steps,4" db:"steps" json:"steps"`
  Cycles int32 `thrift:"cycles,5" db:"cycles" json:"cycles"`
  Score float64 `thrift:"score,6" db:"score" json:"score"`
  WorkerName string `thrift:"worker_name,7" db:"worker_name" json:"worker_name"`
  InstanceName string `thrift:"instance_name,8" db:"instance_name" json:"instance_name"`
}

func NewResultJob() *ResultJob {
  return &ResultJob{}
}


func (p *ResultJob) GetJobID() int32 {
  return p.JobID
}

func (p *ResultJob) GetStatus() int32 {
  return p.Status
}

func (p *ResultJob) GetSeconds() int32 {
  return p.Seconds
}

func (p *ResultJob) GetSteps() int32 {
  return p.Steps
}

func (p *ResultJob) GetCycles() int32 {
  return p.Cycles
}

func (p *ResultJob) GetScore() float64 {
  return p.Score
}

func (p *ResultJob) GetWorkerName() string {
  return p.WorkerName
}

func (p *ResultJob) GetInstanceName() string {
  return p.InstanceName
}
func (p *ResultJob) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultJob)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *ResultJob)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *ResultJob)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Seconds = v
}
  return nil
}

func (p *ResultJob)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Steps = v
}
  return nil
}

func (p *ResultJob)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Cycles = v
}
  return nil
}

func (p *ResultJob)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Score = v
}
  return nil
}

func (p *ResultJob)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.WorkerName = v
}
  return nil
}

func (p *ResultJob)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.InstanceName = v
}
  return nil
}

func (p *ResultJob) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ResultJob"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultJob) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *ResultJob) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *ResultJob) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seconds", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seconds: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seconds (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seconds: ", p), err) }
  return err
}

func (p *ResultJob) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "steps", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:steps: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Steps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.steps (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:steps: ", p), err) }
  return err
}

func (p *ResultJob) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cycles", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cycles: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Cycles)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cycles (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cycles: ", p), err) }
  return err
}

func (p *ResultJob) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "score", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:score: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Score)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.score (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:score: ", p), err) }
  return err
}

func (p *ResultJob) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "worker_name", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:worker_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WorkerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.worker_name (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:worker_name: ", p), err) }
  return err
}

func (p *ResultJob) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "instance_name", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:instance_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InstanceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instance_name (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:instance_name: ", p), err) }
  return err
}

func (p *ResultJob) Equals(other *ResultJob) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JobID != other.JobID { return false }
  if p.Status != other.Status { return false }
  if p.Seconds != other.Seconds { return false }
  if p.Steps != other.Steps { return false }
  if p.Cycles != other.Cycles { return false }
  if p.Score != other.Score { return false }
  if p.WorkerName != other.WorkerName { return false }
  if p.InstanceName != other.InstanceName { return false }
  return true
}

func (p *ResultJob) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultJob(%+v)", *p)
}

// Attributes:
//  - JobID
//  - UserID
//  - SearchID
//  - Status
//  - Priority
//  - Callback
//  - TimeAdded
//  - AgentID
//  - WorldID
//  - AgentParam
//  - WorldParam
//  - Note
//  - BailThreshold
//  - WorkerName
//  - InstanceName
//  - TimeHanded
//  - Seconds
//  - Steps
//  - Cycles
//  - Bailed
//  - Score
type JobInfo struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  SearchID int32 `thrift:"search_id,3" db:"search_id" json:"search_id"`
  Status int32 `thrift:"status,4" db:"status" json:"status"`
  Priority int32 `thrift:"priority,5" db:"priority" json:"priority"`
  Callback *string `thrift:"callback,6" db:"callback" json:"callback,omitempty"`
  TimeAdded string `thrift:"time_added,7" db:"time_added" json:"time_added"`
  AgentID int32 `thrift:"agent_id,8" db:"agent_id" json:"agent_id"`
  WorldID int32 `thrift:"world_id,9" db:"world_id" json:"world_id"`
  AgentParam string `thrift:"agent_param,10" db:"agent_param" json:"agent_param"`
  WorldParam string `thrift:"world_param,11" db:"world_param" json:"world_param"`
  Note string `thrift:"note,12" db:"note" json:"note"`
  BailThreshold float64 `thrift:"bail_threshold,13" db:"bail_threshold" json:"bail_threshold"`
  WorkerName *string `thrift:"worker_name,14" db:"worker_name" json:"worker_name,omitempty"`
  InstanceName *string `thrift:"instance_name,15" db:"instance_name" json:"instance_name,omitempty"`
  TimeHanded *string `thrift:"time_handed,16" db:"time_handed" json:"time_handed,omitempty"`
  Seconds *int32 `thrift:"seconds,17" db:"seconds" json:"seconds,omitempty"`
  Steps *int32 `thrift:"steps,18" db:"steps" json:"steps,omitempty"`
  Cycles *int32 `thrift:"cycles,19" db:"cycles" json:"cycles,omitempty"`
  Bailed *bool `thrift:"bailed,20" db:"bailed" json:"bailed,omitempty"`
  Score float64 `thrift:"score,21" db:"score" json:"score"`
}

func NewJobInfo() *JobInfo {
  return &JobInfo{}
}


func (p *JobInfo) GetJobID() int32 {
  return p.JobID
}

func (p *JobInfo) GetUserID() int32 {
  return p.UserID
}

func (p *JobInfo) GetSearchID() int32 {
  return p.SearchID
}

func (p *JobInfo) GetStatus() int32 {
  return p.Status
}

func (p *JobInfo) GetPriority() int32 {
  return p.Priority
}
var JobInfo_Callback_DEFAULT string
func (p *JobInfo) GetCallback() string {
  if !p.IsSetCallback() {
    return JobInfo_Callback_DEFAULT
  }
return *p.Callback
}

func (p *JobInfo) GetTimeAdded() string {
  return p.TimeAdded
}

func (p *JobInfo) GetAgentID() int32 {
  return p.AgentID
}

func (p *JobInfo) GetWorldID() int32 {
  return p.WorldID
}

func (p *JobInfo) GetAgentParam() string {
  return p.AgentParam
}

func (p *JobInfo) GetWorldParam() string {
  return p.WorldParam
}

func (p *JobInfo) GetNote() string {
  return p.Note
}

func (p *JobInfo) GetBailThreshold() float64 {
  return p.BailThreshold
}
var JobInfo_WorkerName_DEFAULT string
func (p *JobInfo) GetWorkerName() string {
  if !p.IsSetWorkerName() {
    return JobInfo_WorkerName_DEFAULT
  }
return *p.WorkerName
}
var JobInfo_InstanceName_DEFAULT string
func (p *JobInfo) GetInstanceName() string {
  if !p.IsSetInstanceName() {
    return JobInfo_InstanceName_DEFAULT
  }
return *p.InstanceName
}
var JobInfo_TimeHanded_DEFAULT string
func (p *JobInfo) GetTimeHanded() string {
  if !p.IsSetTimeHanded() {
    return JobInfo_TimeHanded_DEFAULT
  }
return *p.TimeHanded
}
var JobInfo_Seconds_DEFAULT int32
func (p *JobInfo) GetSeconds() int32 {
  if !p.IsSetSeconds() {
    return JobInfo_Seconds_DEFAULT
  }
return *p.Seconds
}
var JobInfo_Steps_DEFAULT int32
func (p *JobInfo) GetSteps() int32 {
  if !p.IsSetSteps() {
    return JobInfo_Steps_DEFAULT
  }
return *p.Steps
}
var JobInfo_Cycles_DEFAULT int32
func (p *JobInfo) GetCycles() int32 {
  if !p.IsSetCycles() {
    return JobInfo_Cycles_DEFAULT
  }
return *p.Cycles
}
var JobInfo_Bailed_DEFAULT bool
func (p *JobInfo) GetBailed() bool {
  if !p.IsSetBailed() {
    return JobInfo_Bailed_DEFAULT
  }
return *p.Bailed
}

func (p *JobInfo) GetScore() float64 {
  return p.Score
}
func (p *JobInfo) IsSetCallback() bool {
  return p.Callback != nil
}

func (p *JobInfo) IsSetWorkerName() bool {
  return p.WorkerName != nil
}

func (p *JobInfo) IsSetInstanceName() bool {
  return p.InstanceName != nil
}

func (p *JobInfo) IsSetTimeHanded() bool {
  return p.TimeHanded != nil
}

func (p *JobInfo) IsSetSeconds() bool {
  return p.Seconds != nil
}

func (p *JobInfo) IsSetSteps() bool {
  return p.Steps != nil
}

func (p *JobInfo) IsSetCycles() bool {
  return p.Cycles != nil
}

func (p *JobInfo) IsSetBailed() bool {
  return p.Bailed != nil
}

func (p *JobInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *JobInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *JobInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SearchID = v
}
  return nil
}

func (p *JobInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *JobInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Priority = v
}
  return nil
}

func (p *JobInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Callback = &v
}
  return nil
}

func (p *JobInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TimeAdded = v
}
  return nil
}

func (p *JobInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AgentID = v
}
  return nil
}

func (p *JobInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.WorldID = v
}
  return nil
}

func (p *JobInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AgentParam = v
}
  return nil
}

func (p *JobInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.WorldParam = v
}
  return nil
}

func (p *JobInfo)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Note = v
}
  return nil
}

func (p *JobInfo)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.BailThreshold = v
}
  return nil
}

func (p *JobInfo)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.WorkerName = &v
}
  return nil
}

func (p *JobInfo)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.InstanceName = &v
}
  return nil
}

func (p *JobInfo)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.TimeHanded = &v
}
  return nil
}

func (p *JobInfo)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Seconds = &v
}
  return nil
}

func (p *JobInfo)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Steps = &v
}
  return nil
}

func (p *JobInfo)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Cycles = &v
}
  return nil
}

func (p *JobInfo)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Bailed = &v
}
  return nil
}

func (p *JobInfo)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Score = v
}
  return nil
}

func (p *JobInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JobInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *JobInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *JobInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "search_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:search_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SearchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.search_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:search_id: ", p), err) }
  return err
}

func (p *JobInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *JobInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "priority", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:priority: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Priority)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priority (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:priority: ", p), err) }
  return err
}

func (p *JobInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCallback() {
    if err := oprot.WriteFieldBegin(ctx, "callback", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:callback: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Callback)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.callback (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:callback: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_added", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:time_added: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TimeAdded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_added (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:time_added: ", p), err) }
  return err
}

func (p *JobInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_id", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:agent_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AgentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_id (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:agent_id: ", p), err) }
  return err
}

func (p *JobInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "world_id", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:world_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.WorldID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.world_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:world_id: ", p), err) }
  return err
}

func (p *JobInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_param", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:agent_param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_param (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:agent_param: ", p), err) }
  return err
}

func (p *JobInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "world_param", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:world_param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WorldParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.world_param (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:world_param: ", p), err) }
  return err
}

func (p *JobInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "note", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:note: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Note)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.note (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:note: ", p), err) }
  return err
}

func (p *JobInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bail_threshold", thrift.DOUBLE, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:bail_threshold: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.BailThreshold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bail_threshold (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:bail_threshold: ", p), err) }
  return err
}

func (p *JobInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkerName() {
    if err := oprot.WriteFieldBegin(ctx, "worker_name", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:worker_name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.WorkerName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.worker_name (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:worker_name: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInstanceName() {
    if err := oprot.WriteFieldBegin(ctx, "instance_name", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:instance_name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.InstanceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.instance_name (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:instance_name: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeHanded() {
    if err := oprot.WriteFieldBegin(ctx, "time_handed", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:time_handed: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TimeHanded)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.time_handed (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:time_handed: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSeconds() {
    if err := oprot.WriteFieldBegin(ctx, "seconds", thrift.I32, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:seconds: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Seconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.seconds (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:seconds: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSteps() {
    if err := oprot.WriteFieldBegin(ctx, "steps", thrift.I32, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:steps: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Steps)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.steps (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:steps: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCycles() {
    if err := oprot.WriteFieldBegin(ctx, "cycles", thrift.I32, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:cycles: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Cycles)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cycles (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:cycles: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBailed() {
    if err := oprot.WriteFieldBegin(ctx, "bailed", thrift.BOOL, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:bailed: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Bailed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bailed (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:bailed: ", p), err) }
  }
  return err
}

func (p *JobInfo) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "score", thrift.DOUBLE, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:score: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Score)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.score (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:score: ", p), err) }
  return err
}

func (p *JobInfo) Equals(other *JobInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JobID != other.JobID { return false }
  if p.UserID != other.UserID { return false }
  if p.SearchID != other.SearchID { return false }
  if p.Status != other.Status { return false }
  if p.Priority != other.Priority { return false }
  if p.Callback != other.Callback {
    if p.Callback == nil || other.Callback == nil {
      return false
    }
    if (*p.Callback) != (*other.Callback) { return false }
  }
  if p.TimeAdded != other.TimeAdded { return false }
  if p.AgentID != other.AgentID { return false }
  if p.WorldID != other.WorldID { return false }
  if p.AgentParam != other.AgentParam { return false }
  if p.WorldParam != other.WorldParam { return false }
  if p.Note != other.Note { return false }
  if p.BailThreshold != other.BailThreshold { return false }
  if p.WorkerName != other.WorkerName {
    if p.WorkerName == nil || other.WorkerName == nil {
      return false
    }
    if (*p.WorkerName) != (*other.WorkerName) { return false }
  }
  if p.InstanceName != other.InstanceName {
    if p.InstanceName == nil || other.InstanceName == nil {
      return false
    }
    if (*p.InstanceName) != (*other.InstanceName) { return false }
  }
  if p.TimeHanded != other.TimeHanded {
    if p.TimeHanded == nil || other.TimeHanded == nil {
      return false
    }
    if (*p.TimeHanded) != (*other.TimeHanded) { return false }
  }
  if p.Seconds != other.Seconds {
    if p.Seconds == nil || other.Seconds == nil {
      return false
    }
    if (*p.Seconds) != (*other.Seconds) { return false }
  }
  if p.Steps != other.Steps {
    if p.Steps == nil || other.Steps == nil {
      return false
    }
    if (*p.Steps) != (*other.Steps) { return false }
  }
  if p.Cycles != other.Cycles {
    if p.Cycles == nil || other.Cycles == nil {
      return false
    }
    if (*p.Cycles) != (*other.Cycles) { return false }
  }
  if p.Bailed != other.Bailed {
    if p.Bailed == nil || other.Bailed == nil {
      return false
    }
    if (*p.Bailed) != (*other.Bailed) { return false }
  }
  if p.Score != other.Score { return false }
  return true
}

func (p *JobInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobInfo(%+v)", *p)
}

// Attributes:
//  - BinID
//  - Name
//  - Version
//  - PackageHash
//  - TimeAdded
//  - Type
//  - Status
type BinInfo struct {
  BinID int32 `thrift:"bin_id,1" db:"bin_id" json:"bin_id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Version string `thrift:"version,3" db:"version" json:"version"`
  PackageHash string `thrift:"package_hash,4" db:"package_hash" json:"package_hash"`
  TimeAdded string `thrift:"time_added,5" db:"time_added" json:"time_added"`
  Type int32 `thrift:"type,6" db:"type" json:"type"`
  Status int32 `thrift:"status,7" db:"status" json:"status"`
}

func NewBinInfo() *BinInfo {
  return &BinInfo{}
}


func (p *BinInfo) GetBinID() int32 {
  return p.BinID
}

func (p *BinInfo) GetName() string {
  return p.Name
}

func (p *BinInfo) GetVersion() string {
  return p.Version
}

func (p *BinInfo) GetPackageHash() string {
  return p.PackageHash
}

func (p *BinInfo) GetTimeAdded() string {
  return p.TimeAdded
}

func (p *BinInfo) GetType() int32 {
  return p.Type
}

func (p *BinInfo) GetStatus() int32 {
  return p.Status
}
func (p *BinInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BinInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BinID = v
}
  return nil
}

func (p *BinInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *BinInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *BinInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PackageHash = v
}
  return nil
}

func (p *BinInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TimeAdded = v
}
  return nil
}

func (p *BinInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *BinInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *BinInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BinInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BinInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bin_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bin_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BinID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bin_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bin_id: ", p), err) }
  return err
}

func (p *BinInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *BinInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *BinInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "package_hash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:package_hash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PackageHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.package_hash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:package_hash: ", p), err) }
  return err
}

func (p *BinInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_added", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:time_added: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TimeAdded)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_added (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:time_added: ", p), err) }
  return err
}

func (p *BinInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err) }
  return err
}

func (p *BinInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *BinInfo) Equals(other *BinInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.BinID != other.BinID { return false }
  if p.Name != other.Name { return false }
  if p.Version != other.Version { return false }
  if p.PackageHash != other.PackageHash { return false }
  if p.TimeAdded != other.TimeAdded { return false }
  if p.Type != other.Type { return false }
  if p.Status != other.Status { return false }
  return true
}

func (p *BinInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BinInfo(%+v)", *p)
}

type JobCzar interface {
  // Parameters:
  //  - WorkerName
  //  - InstanceName
  FetchWork(ctx context.Context, worker_name string, instance_name string) (_r *Job, _err error)
  // Parameters:
  //  - Result_
  SubmitResult_(ctx context.Context, result *ResultJob) (_r bool, _err error)
  // Parameters:
  //  - AgentID
  //  - WorldID
  //  - AgentParam
  //  - WorldParam
  //  - Priority
  //  - UserID
  //  - Note
  AddJob(ctx context.Context, agent_id int32, world_id int32, agent_param string, world_param string, priority int32, user_id int32, note string) (_r int32, _err error)
  // Parameters:
  //  - JobID
  FetchRunResults(ctx context.Context, job_id int32) (_err error)
  // Parameters:
  //  - JobID
  //  - Note
  UpdateNote(ctx context.Context, job_id int32, note string) (_r bool, _err error)
  // Parameters:
  //  - BinID
  GetBinInfo(ctx context.Context, bin_id int32) (_r *BinInfo, _err error)
  // Parameters:
  //  - FilterBy
  GetBinInfos(ctx context.Context, filter_by string) (_r []*BinInfo, _err error)
  // Parameters:
  //  - Query
  RunSQL(ctx context.Context, query string) (_r []map[string]string, _err error)
  // Parameters:
  //  - JobID
  RemoveJob(ctx context.Context, job_id int32) (_r bool, _err error)
  // Parameters:
  //  - FilterBy
  QueryJobs(ctx context.Context, filter_by string) (_r []*JobInfo, _err error)
}

type JobCzarClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewJobCzarClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *JobCzarClient {
  return &JobCzarClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewJobCzarClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *JobCzarClient {
  return &JobCzarClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewJobCzarClient(c thrift.TClient) *JobCzarClient {
  return &JobCzarClient{
    c: c,
  }
}

func (p *JobCzarClient) Client_() thrift.TClient {
  return p.c
}

func (p *JobCzarClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *JobCzarClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - WorkerName
//  - InstanceName
func (p *JobCzarClient) FetchWork(ctx context.Context, worker_name string, instance_name string) (_r *Job, _err error) {
  var _args0 JobCzarFetchWorkArgs
  _args0.WorkerName = worker_name
  _args0.InstanceName = instance_name
  var _result2 JobCzarFetchWorkResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "fetchWork", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "fetchWork failed: unknown result")
}

// Parameters:
//  - Result_
func (p *JobCzarClient) SubmitResult_(ctx context.Context, result *ResultJob) (_r bool, _err error) {
  var _args4 JobCzarSubmitResultArgs
  _args4.Result_ = result
  var _result6 JobCzarSubmitResultResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "submitResult", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - AgentID
//  - WorldID
//  - AgentParam
//  - WorldParam
//  - Priority
//  - UserID
//  - Note
func (p *JobCzarClient) AddJob(ctx context.Context, agent_id int32, world_id int32, agent_param string, world_param string, priority int32, user_id int32, note string) (_r int32, _err error) {
  var _args7 JobCzarAddJobArgs
  _args7.AgentID = agent_id
  _args7.WorldID = world_id
  _args7.AgentParam = agent_param
  _args7.WorldParam = world_param
  _args7.Priority = priority
  _args7.UserID = user_id
  _args7.Note = note
  var _result9 JobCzarAddJobResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "addJob", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - JobID
func (p *JobCzarClient) FetchRunResults(ctx context.Context, job_id int32) (_err error) {
  var _args10 JobCzarFetchRunResultsArgs
  _args10.JobID = job_id
  var _result12 JobCzarFetchRunResultsResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "fetchRunResults", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - JobID
//  - Note
func (p *JobCzarClient) UpdateNote(ctx context.Context, job_id int32, note string) (_r bool, _err error) {
  var _args13 JobCzarUpdateNoteArgs
  _args13.JobID = job_id
  _args13.Note = note
  var _result15 JobCzarUpdateNoteResult
  var _meta14 thrift.ResponseMeta
  _meta14, _err = p.Client_().Call(ctx, "updateNote", &_args13, &_result15)
  p.SetLastResponseMeta_(_meta14)
  if _err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - BinID
func (p *JobCzarClient) GetBinInfo(ctx context.Context, bin_id int32) (_r *BinInfo, _err error) {
  var _args16 JobCzarGetBinInfoArgs
  _args16.BinID = bin_id
  var _result18 JobCzarGetBinInfoResult
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "getBinInfo", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  if _ret19 := _result18.GetSuccess(); _ret19 != nil {
    return _ret19, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getBinInfo failed: unknown result")
}

// Parameters:
//  - FilterBy
func (p *JobCzarClient) GetBinInfos(ctx context.Context, filter_by string) (_r []*BinInfo, _err error) {
  var _args20 JobCzarGetBinInfosArgs
  _args20.FilterBy = filter_by
  var _result22 JobCzarGetBinInfosResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "getBinInfos", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  return _result22.GetSuccess(), nil
}

// Parameters:
//  - Query
func (p *JobCzarClient) RunSQL(ctx context.Context, query string) (_r []map[string]string, _err error) {
  var _args23 JobCzarRunSQLArgs
  _args23.Query = query
  var _result25 JobCzarRunSQLResult
  var _meta24 thrift.ResponseMeta
  _meta24, _err = p.Client_().Call(ctx, "runSQL", &_args23, &_result25)
  p.SetLastResponseMeta_(_meta24)
  if _err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

// Parameters:
//  - JobID
func (p *JobCzarClient) RemoveJob(ctx context.Context, job_id int32) (_r bool, _err error) {
  var _args26 JobCzarRemoveJobArgs
  _args26.JobID = job_id
  var _result28 JobCzarRemoveJobResult
  var _meta27 thrift.ResponseMeta
  _meta27, _err = p.Client_().Call(ctx, "removeJob", &_args26, &_result28)
  p.SetLastResponseMeta_(_meta27)
  if _err != nil {
    return
  }
  return _result28.GetSuccess(), nil
}

// Parameters:
//  - FilterBy
func (p *JobCzarClient) QueryJobs(ctx context.Context, filter_by string) (_r []*JobInfo, _err error) {
  var _args29 JobCzarQueryJobsArgs
  _args29.FilterBy = filter_by
  var _result31 JobCzarQueryJobsResult
  var _meta30 thrift.ResponseMeta
  _meta30, _err = p.Client_().Call(ctx, "queryJobs", &_args29, &_result31)
  p.SetLastResponseMeta_(_meta30)
  if _err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

type JobCzarProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler JobCzar
}

func (p *JobCzarProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *JobCzarProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *JobCzarProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewJobCzarProcessor(handler JobCzar) *JobCzarProcessor {

  self32 := &JobCzarProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self32.processorMap["fetchWork"] = &jobCzarProcessorFetchWork{handler:handler}
  self32.processorMap["submitResult"] = &jobCzarProcessorSubmitResult_{handler:handler}
  self32.processorMap["addJob"] = &jobCzarProcessorAddJob{handler:handler}
  self32.processorMap["fetchRunResults"] = &jobCzarProcessorFetchRunResults{handler:handler}
  self32.processorMap["updateNote"] = &jobCzarProcessorUpdateNote{handler:handler}
  self32.processorMap["getBinInfo"] = &jobCzarProcessorGetBinInfo{handler:handler}
  self32.processorMap["getBinInfos"] = &jobCzarProcessorGetBinInfos{handler:handler}
  self32.processorMap["runSQL"] = &jobCzarProcessorRunSQL{handler:handler}
  self32.processorMap["removeJob"] = &jobCzarProcessorRemoveJob{handler:handler}
  self32.processorMap["queryJobs"] = &jobCzarProcessorQueryJobs{handler:handler}
return self32
}

func (p *JobCzarProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x33 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x33.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x33

}

type jobCzarProcessorFetchWork struct {
  handler JobCzar
}

func (p *jobCzarProcessorFetchWork) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarFetchWorkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchWork", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarFetchWorkResult{}
  var retval *Job
  if retval, err2 = p.handler.FetchWork(ctx, args.WorkerName, args.InstanceName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchWork: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchWork", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchWork", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorSubmitResult_ struct {
  handler JobCzar
}

func (p *jobCzarProcessorSubmitResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarSubmitResultArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "submitResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarSubmitResultResult{}
  var retval bool
  if retval, err2 = p.handler.SubmitResult_(ctx, args.Result_); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submitResult: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "submitResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "submitResult", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorAddJob struct {
  handler JobCzar
}

func (p *jobCzarProcessorAddJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarAddJobArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addJob", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarAddJobResult{}
  var retval int32
  if retval, err2 = p.handler.AddJob(ctx, args.AgentID, args.WorldID, args.AgentParam, args.WorldParam, args.Priority, args.UserID, args.Note); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addJob: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "addJob", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "addJob", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorFetchRunResults struct {
  handler JobCzar
}

func (p *jobCzarProcessorFetchRunResults) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarFetchRunResultsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchRunResults", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarFetchRunResultsResult{}
  if err2 = p.handler.FetchRunResults(ctx, args.JobID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchRunResults: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchRunResults", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchRunResults", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorUpdateNote struct {
  handler JobCzar
}

func (p *jobCzarProcessorUpdateNote) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarUpdateNoteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNote", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarUpdateNoteResult{}
  var retval bool
  if retval, err2 = p.handler.UpdateNote(ctx, args.JobID, args.Note); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNote: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNote", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateNote", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorGetBinInfo struct {
  handler JobCzar
}

func (p *jobCzarProcessorGetBinInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarGetBinInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBinInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarGetBinInfoResult{}
  var retval *BinInfo
  if retval, err2 = p.handler.GetBinInfo(ctx, args.BinID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBinInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBinInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBinInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorGetBinInfos struct {
  handler JobCzar
}

func (p *jobCzarProcessorGetBinInfos) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarGetBinInfosArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBinInfos", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarGetBinInfosResult{}
  var retval []*BinInfo
  if retval, err2 = p.handler.GetBinInfos(ctx, args.FilterBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBinInfos: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBinInfos", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBinInfos", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorRunSQL struct {
  handler JobCzar
}

func (p *jobCzarProcessorRunSQL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarRunSQLArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "runSQL", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarRunSQLResult{}
  var retval []map[string]string
  if retval, err2 = p.handler.RunSQL(ctx, args.Query); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing runSQL: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "runSQL", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "runSQL", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorRemoveJob struct {
  handler JobCzar
}

func (p *jobCzarProcessorRemoveJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarRemoveJobArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeJob", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarRemoveJobResult{}
  var retval bool
  if retval, err2 = p.handler.RemoveJob(ctx, args.JobID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeJob: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeJob", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeJob", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jobCzarProcessorQueryJobs struct {
  handler JobCzar
}

func (p *jobCzarProcessorQueryJobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JobCzarQueryJobsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "queryJobs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JobCzarQueryJobsResult{}
  var retval []*JobInfo
  if retval, err2 = p.handler.QueryJobs(ctx, args.FilterBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryJobs: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "queryJobs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "queryJobs", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - WorkerName
//  - InstanceName
type JobCzarFetchWorkArgs struct {
  WorkerName string `thrift:"worker_name,1" db:"worker_name" json:"worker_name"`
  InstanceName string `thrift:"instance_name,2" db:"instance_name" json:"instance_name"`
}

func NewJobCzarFetchWorkArgs() *JobCzarFetchWorkArgs {
  return &JobCzarFetchWorkArgs{}
}


func (p *JobCzarFetchWorkArgs) GetWorkerName() string {
  return p.WorkerName
}

func (p *JobCzarFetchWorkArgs) GetInstanceName() string {
  return p.InstanceName
}
func (p *JobCzarFetchWorkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarFetchWorkArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WorkerName = v
}
  return nil
}

func (p *JobCzarFetchWorkArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InstanceName = v
}
  return nil
}

func (p *JobCzarFetchWorkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchWork_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarFetchWorkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "worker_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:worker_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WorkerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.worker_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:worker_name: ", p), err) }
  return err
}

func (p *JobCzarFetchWorkArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "instance_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:instance_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InstanceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instance_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:instance_name: ", p), err) }
  return err
}

func (p *JobCzarFetchWorkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarFetchWorkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarFetchWorkResult struct {
  Success *Job `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarFetchWorkResult() *JobCzarFetchWorkResult {
  return &JobCzarFetchWorkResult{}
}

var JobCzarFetchWorkResult_Success_DEFAULT *Job
func (p *JobCzarFetchWorkResult) GetSuccess() *Job {
  if !p.IsSetSuccess() {
    return JobCzarFetchWorkResult_Success_DEFAULT
  }
return p.Success
}
func (p *JobCzarFetchWorkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarFetchWorkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarFetchWorkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Job{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *JobCzarFetchWorkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchWork_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarFetchWorkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarFetchWorkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarFetchWorkResult(%+v)", *p)
}

// Attributes:
//  - Result_
type JobCzarSubmitResultArgs struct {
  Result_ *ResultJob `thrift:"result,1" db:"result" json:"result"`
}

func NewJobCzarSubmitResultArgs() *JobCzarSubmitResultArgs {
  return &JobCzarSubmitResultArgs{}
}

var JobCzarSubmitResultArgs_Result__DEFAULT *ResultJob
func (p *JobCzarSubmitResultArgs) GetResult_() *ResultJob {
  if !p.IsSetResult_() {
    return JobCzarSubmitResultArgs_Result__DEFAULT
  }
return p.Result_
}
func (p *JobCzarSubmitResultArgs) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *JobCzarSubmitResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarSubmitResultArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResultJob{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *JobCzarSubmitResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "submitResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarSubmitResultArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *JobCzarSubmitResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarSubmitResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarSubmitResultResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarSubmitResultResult() *JobCzarSubmitResultResult {
  return &JobCzarSubmitResultResult{}
}

var JobCzarSubmitResultResult_Success_DEFAULT bool
func (p *JobCzarSubmitResultResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return JobCzarSubmitResultResult_Success_DEFAULT
  }
return *p.Success
}
func (p *JobCzarSubmitResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarSubmitResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarSubmitResultResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JobCzarSubmitResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "submitResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarSubmitResultResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarSubmitResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarSubmitResultResult(%+v)", *p)
}

// Attributes:
//  - AgentID
//  - WorldID
//  - AgentParam
//  - WorldParam
//  - Priority
//  - UserID
//  - Note
type JobCzarAddJobArgs struct {
  AgentID int32 `thrift:"agent_id,1" db:"agent_id" json:"agent_id"`
  WorldID int32 `thrift:"world_id,2" db:"world_id" json:"world_id"`
  AgentParam string `thrift:"agent_param,3" db:"agent_param" json:"agent_param"`
  WorldParam string `thrift:"world_param,4" db:"world_param" json:"world_param"`
  Priority int32 `thrift:"priority,5" db:"priority" json:"priority"`
  UserID int32 `thrift:"user_id,6" db:"user_id" json:"user_id"`
  Note string `thrift:"note,7" db:"note" json:"note"`
}

func NewJobCzarAddJobArgs() *JobCzarAddJobArgs {
  return &JobCzarAddJobArgs{}
}


func (p *JobCzarAddJobArgs) GetAgentID() int32 {
  return p.AgentID
}

func (p *JobCzarAddJobArgs) GetWorldID() int32 {
  return p.WorldID
}

func (p *JobCzarAddJobArgs) GetAgentParam() string {
  return p.AgentParam
}

func (p *JobCzarAddJobArgs) GetWorldParam() string {
  return p.WorldParam
}

func (p *JobCzarAddJobArgs) GetPriority() int32 {
  return p.Priority
}

func (p *JobCzarAddJobArgs) GetUserID() int32 {
  return p.UserID
}

func (p *JobCzarAddJobArgs) GetNote() string {
  return p.Note
}
func (p *JobCzarAddJobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarAddJobArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentID = v
}
  return nil
}

func (p *JobCzarAddJobArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WorldID = v
}
  return nil
}

func (p *JobCzarAddJobArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AgentParam = v
}
  return nil
}

func (p *JobCzarAddJobArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.WorldParam = v
}
  return nil
}

func (p *JobCzarAddJobArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Priority = v
}
  return nil
}

func (p *JobCzarAddJobArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *JobCzarAddJobArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Note = v
}
  return nil
}

func (p *JobCzarAddJobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarAddJobArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agent_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AgentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agent_id: ", p), err) }
  return err
}

func (p *JobCzarAddJobArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "world_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:world_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.WorldID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.world_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:world_id: ", p), err) }
  return err
}

func (p *JobCzarAddJobArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_param", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agent_param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_param (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agent_param: ", p), err) }
  return err
}

func (p *JobCzarAddJobArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "world_param", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:world_param: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WorldParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.world_param (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:world_param: ", p), err) }
  return err
}

func (p *JobCzarAddJobArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "priority", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:priority: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Priority)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priority (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:priority: ", p), err) }
  return err
}

func (p *JobCzarAddJobArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:user_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:user_id: ", p), err) }
  return err
}

func (p *JobCzarAddJobArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "note", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:note: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Note)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.note (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:note: ", p), err) }
  return err
}

func (p *JobCzarAddJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarAddJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarAddJobResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarAddJobResult() *JobCzarAddJobResult {
  return &JobCzarAddJobResult{}
}

var JobCzarAddJobResult_Success_DEFAULT int32
func (p *JobCzarAddJobResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return JobCzarAddJobResult_Success_DEFAULT
  }
return *p.Success
}
func (p *JobCzarAddJobResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarAddJobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarAddJobResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JobCzarAddJobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarAddJobResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarAddJobResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarAddJobResult(%+v)", *p)
}

// Attributes:
//  - JobID
type JobCzarFetchRunResultsArgs struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
}

func NewJobCzarFetchRunResultsArgs() *JobCzarFetchRunResultsArgs {
  return &JobCzarFetchRunResultsArgs{}
}


func (p *JobCzarFetchRunResultsArgs) GetJobID() int32 {
  return p.JobID
}
func (p *JobCzarFetchRunResultsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarFetchRunResultsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *JobCzarFetchRunResultsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchRunResults_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarFetchRunResultsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *JobCzarFetchRunResultsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarFetchRunResultsArgs(%+v)", *p)
}

type JobCzarFetchRunResultsResult struct {
}

func NewJobCzarFetchRunResultsResult() *JobCzarFetchRunResultsResult {
  return &JobCzarFetchRunResultsResult{}
}

func (p *JobCzarFetchRunResultsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarFetchRunResultsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchRunResults_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarFetchRunResultsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarFetchRunResultsResult(%+v)", *p)
}

// Attributes:
//  - JobID
//  - Note
type JobCzarUpdateNoteArgs struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
  Note string `thrift:"note,2" db:"note" json:"note"`
}

func NewJobCzarUpdateNoteArgs() *JobCzarUpdateNoteArgs {
  return &JobCzarUpdateNoteArgs{}
}


func (p *JobCzarUpdateNoteArgs) GetJobID() int32 {
  return p.JobID
}

func (p *JobCzarUpdateNoteArgs) GetNote() string {
  return p.Note
}
func (p *JobCzarUpdateNoteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarUpdateNoteArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *JobCzarUpdateNoteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Note = v
}
  return nil
}

func (p *JobCzarUpdateNoteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNote_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarUpdateNoteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *JobCzarUpdateNoteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "note", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:note: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Note)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.note (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:note: ", p), err) }
  return err
}

func (p *JobCzarUpdateNoteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarUpdateNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarUpdateNoteResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarUpdateNoteResult() *JobCzarUpdateNoteResult {
  return &JobCzarUpdateNoteResult{}
}

var JobCzarUpdateNoteResult_Success_DEFAULT bool
func (p *JobCzarUpdateNoteResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return JobCzarUpdateNoteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *JobCzarUpdateNoteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarUpdateNoteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarUpdateNoteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JobCzarUpdateNoteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNote_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarUpdateNoteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarUpdateNoteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarUpdateNoteResult(%+v)", *p)
}

// Attributes:
//  - BinID
type JobCzarGetBinInfoArgs struct {
  BinID int32 `thrift:"bin_id,1" db:"bin_id" json:"bin_id"`
}

func NewJobCzarGetBinInfoArgs() *JobCzarGetBinInfoArgs {
  return &JobCzarGetBinInfoArgs{}
}


func (p *JobCzarGetBinInfoArgs) GetBinID() int32 {
  return p.BinID
}
func (p *JobCzarGetBinInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarGetBinInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BinID = v
}
  return nil
}

func (p *JobCzarGetBinInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBinInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarGetBinInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bin_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bin_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BinID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bin_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bin_id: ", p), err) }
  return err
}

func (p *JobCzarGetBinInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarGetBinInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarGetBinInfoResult struct {
  Success *BinInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarGetBinInfoResult() *JobCzarGetBinInfoResult {
  return &JobCzarGetBinInfoResult{}
}

var JobCzarGetBinInfoResult_Success_DEFAULT *BinInfo
func (p *JobCzarGetBinInfoResult) GetSuccess() *BinInfo {
  if !p.IsSetSuccess() {
    return JobCzarGetBinInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *JobCzarGetBinInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarGetBinInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarGetBinInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &BinInfo{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *JobCzarGetBinInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBinInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarGetBinInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarGetBinInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarGetBinInfoResult(%+v)", *p)
}

// Attributes:
//  - FilterBy
type JobCzarGetBinInfosArgs struct {
  FilterBy string `thrift:"filter_by,1" db:"filter_by" json:"filter_by"`
}

func NewJobCzarGetBinInfosArgs() *JobCzarGetBinInfosArgs {
  return &JobCzarGetBinInfosArgs{}
}


func (p *JobCzarGetBinInfosArgs) GetFilterBy() string {
  return p.FilterBy
}
func (p *JobCzarGetBinInfosArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarGetBinInfosArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FilterBy = v
}
  return nil
}

func (p *JobCzarGetBinInfosArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBinInfos_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarGetBinInfosArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filter_by", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filter_by: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FilterBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter_by (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filter_by: ", p), err) }
  return err
}

func (p *JobCzarGetBinInfosArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarGetBinInfosArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarGetBinInfosResult struct {
  Success []*BinInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarGetBinInfosResult() *JobCzarGetBinInfosResult {
  return &JobCzarGetBinInfosResult{}
}

var JobCzarGetBinInfosResult_Success_DEFAULT []*BinInfo

func (p *JobCzarGetBinInfosResult) GetSuccess() []*BinInfo {
  return p.Success
}
func (p *JobCzarGetBinInfosResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarGetBinInfosResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarGetBinInfosResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BinInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem34 := &BinInfo{}
    if err := _elem34.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
    }
    p.Success = append(p.Success, _elem34)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JobCzarGetBinInfosResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBinInfos_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarGetBinInfosResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarGetBinInfosResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarGetBinInfosResult(%+v)", *p)
}

// Attributes:
//  - Query
type JobCzarRunSQLArgs struct {
  Query string `thrift:"query,1" db:"query" json:"query"`
}

func NewJobCzarRunSQLArgs() *JobCzarRunSQLArgs {
  return &JobCzarRunSQLArgs{}
}


func (p *JobCzarRunSQLArgs) GetQuery() string {
  return p.Query
}
func (p *JobCzarRunSQLArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarRunSQLArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *JobCzarRunSQLArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "runSQL_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarRunSQLArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *JobCzarRunSQLArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarRunSQLArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarRunSQLResult struct {
  Success []map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarRunSQLResult() *JobCzarRunSQLResult {
  return &JobCzarRunSQLResult{}
}

var JobCzarRunSQLResult_Success_DEFAULT []map[string]string

func (p *JobCzarRunSQLResult) GetSuccess() []map[string]string {
  return p.Success
}
func (p *JobCzarRunSQLResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarRunSQLResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarRunSQLResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem35 :=  tMap
    for i := 0; i < size; i ++ {
var _key36 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key36 = v
}
var _val37 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val37 = v
}
      _elem35[_key36] = _val37
    }
    if err := iprot.ReadMapEnd(ctx); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Success = append(p.Success, _elem35)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JobCzarRunSQLResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "runSQL_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarRunSQLResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.MAP, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(ctx, string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteString(ctx, string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(ctx); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarRunSQLResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarRunSQLResult(%+v)", *p)
}

// Attributes:
//  - JobID
type JobCzarRemoveJobArgs struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
}

func NewJobCzarRemoveJobArgs() *JobCzarRemoveJobArgs {
  return &JobCzarRemoveJobArgs{}
}


func (p *JobCzarRemoveJobArgs) GetJobID() int32 {
  return p.JobID
}
func (p *JobCzarRemoveJobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarRemoveJobArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *JobCzarRemoveJobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarRemoveJobArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *JobCzarRemoveJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarRemoveJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarRemoveJobResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarRemoveJobResult() *JobCzarRemoveJobResult {
  return &JobCzarRemoveJobResult{}
}

var JobCzarRemoveJobResult_Success_DEFAULT bool
func (p *JobCzarRemoveJobResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return JobCzarRemoveJobResult_Success_DEFAULT
  }
return *p.Success
}
func (p *JobCzarRemoveJobResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarRemoveJobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarRemoveJobResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JobCzarRemoveJobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarRemoveJobResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarRemoveJobResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarRemoveJobResult(%+v)", *p)
}

// Attributes:
//  - FilterBy
type JobCzarQueryJobsArgs struct {
  FilterBy string `thrift:"filter_by,1" db:"filter_by" json:"filter_by"`
}

func NewJobCzarQueryJobsArgs() *JobCzarQueryJobsArgs {
  return &JobCzarQueryJobsArgs{}
}


func (p *JobCzarQueryJobsArgs) GetFilterBy() string {
  return p.FilterBy
}
func (p *JobCzarQueryJobsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarQueryJobsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FilterBy = v
}
  return nil
}

func (p *JobCzarQueryJobsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryJobs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarQueryJobsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filter_by", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filter_by: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FilterBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter_by (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filter_by: ", p), err) }
  return err
}

func (p *JobCzarQueryJobsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarQueryJobsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JobCzarQueryJobsResult struct {
  Success []*JobInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJobCzarQueryJobsResult() *JobCzarQueryJobsResult {
  return &JobCzarQueryJobsResult{}
}

var JobCzarQueryJobsResult_Success_DEFAULT []*JobInfo

func (p *JobCzarQueryJobsResult) GetSuccess() []*JobInfo {
  return p.Success
}
func (p *JobCzarQueryJobsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JobCzarQueryJobsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobCzarQueryJobsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*JobInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := &JobInfo{}
    if err := _elem38.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.Success = append(p.Success, _elem38)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JobCzarQueryJobsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryJobs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobCzarQueryJobsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JobCzarQueryJobsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobCzarQueryJobsResult(%+v)", *p)
}


