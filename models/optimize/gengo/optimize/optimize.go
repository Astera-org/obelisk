// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package optimize

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Name
//  - Center
//  - Stddev
//  - Min
//  - Max
//  - TypeOfScale
//  - IsInteger
type HyperParameter struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Center float64 `thrift:"center,2,required" db:"center" json:"center"`
  Stddev *float64 `thrift:"stddev,3" db:"stddev" json:"stddev,omitempty"`
  Min *float64 `thrift:"min,4" db:"min" json:"min,omitempty"`
  Max *float64 `thrift:"max,5" db:"max" json:"max,omitempty"`
  TypeOfScale *string `thrift:"type_of_scale,6" db:"type_of_scale" json:"type_of_scale,omitempty"`
  IsInteger *bool `thrift:"is_integer,7" db:"is_integer" json:"is_integer,omitempty"`
}

func NewHyperParameter() *HyperParameter {
  return &HyperParameter{}
}


func (p *HyperParameter) GetName() string {
  return p.Name
}

func (p *HyperParameter) GetCenter() float64 {
  return p.Center
}
var HyperParameter_Stddev_DEFAULT float64
func (p *HyperParameter) GetStddev() float64 {
  if !p.IsSetStddev() {
    return HyperParameter_Stddev_DEFAULT
  }
return *p.Stddev
}
var HyperParameter_Min_DEFAULT float64
func (p *HyperParameter) GetMin() float64 {
  if !p.IsSetMin() {
    return HyperParameter_Min_DEFAULT
  }
return *p.Min
}
var HyperParameter_Max_DEFAULT float64
func (p *HyperParameter) GetMax() float64 {
  if !p.IsSetMax() {
    return HyperParameter_Max_DEFAULT
  }
return *p.Max
}
var HyperParameter_TypeOfScale_DEFAULT string
func (p *HyperParameter) GetTypeOfScale() string {
  if !p.IsSetTypeOfScale() {
    return HyperParameter_TypeOfScale_DEFAULT
  }
return *p.TypeOfScale
}
var HyperParameter_IsInteger_DEFAULT bool
func (p *HyperParameter) GetIsInteger() bool {
  if !p.IsSetIsInteger() {
    return HyperParameter_IsInteger_DEFAULT
  }
return *p.IsInteger
}
func (p *HyperParameter) IsSetStddev() bool {
  return p.Stddev != nil
}

func (p *HyperParameter) IsSetMin() bool {
  return p.Min != nil
}

func (p *HyperParameter) IsSetMax() bool {
  return p.Max != nil
}

func (p *HyperParameter) IsSetTypeOfScale() bool {
  return p.TypeOfScale != nil
}

func (p *HyperParameter) IsSetIsInteger() bool {
  return p.IsInteger != nil
}

func (p *HyperParameter) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetCenter bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCenter = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetCenter{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Center is not set"));
  }
  return nil
}

func (p *HyperParameter)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *HyperParameter)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Center = v
}
  return nil
}

func (p *HyperParameter)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Stddev = &v
}
  return nil
}

func (p *HyperParameter)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Min = &v
}
  return nil
}

func (p *HyperParameter)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Max = &v
}
  return nil
}

func (p *HyperParameter)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TypeOfScale = &v
}
  return nil
}

func (p *HyperParameter)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IsInteger = &v
}
  return nil
}

func (p *HyperParameter) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HyperParameter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HyperParameter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *HyperParameter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "center", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:center: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Center)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.center (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:center: ", p), err) }
  return err
}

func (p *HyperParameter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStddev() {
    if err := oprot.WriteFieldBegin(ctx, "stddev", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stddev: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.Stddev)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stddev (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stddev: ", p), err) }
  }
  return err
}

func (p *HyperParameter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMin() {
    if err := oprot.WriteFieldBegin(ctx, "min", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:min: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.Min)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.min (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:min: ", p), err) }
  }
  return err
}

func (p *HyperParameter) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMax() {
    if err := oprot.WriteFieldBegin(ctx, "max", thrift.DOUBLE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.Max)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max: ", p), err) }
  }
  return err
}

func (p *HyperParameter) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTypeOfScale() {
    if err := oprot.WriteFieldBegin(ctx, "type_of_scale", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type_of_scale: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TypeOfScale)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type_of_scale (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type_of_scale: ", p), err) }
  }
  return err
}

func (p *HyperParameter) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsInteger() {
    if err := oprot.WriteFieldBegin(ctx, "is_integer", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:is_integer: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.IsInteger)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_integer (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:is_integer: ", p), err) }
  }
  return err
}

func (p *HyperParameter) Equals(other *HyperParameter) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Center != other.Center { return false }
  if p.Stddev != other.Stddev {
    if p.Stddev == nil || other.Stddev == nil {
      return false
    }
    if (*p.Stddev) != (*other.Stddev) { return false }
  }
  if p.Min != other.Min {
    if p.Min == nil || other.Min == nil {
      return false
    }
    if (*p.Min) != (*other.Min) { return false }
  }
  if p.Max != other.Max {
    if p.Max == nil || other.Max == nil {
      return false
    }
    if (*p.Max) != (*other.Max) { return false }
  }
  if p.TypeOfScale != other.TypeOfScale {
    if p.TypeOfScale == nil || other.TypeOfScale == nil {
      return false
    }
    if (*p.TypeOfScale) != (*other.TypeOfScale) { return false }
  }
  if p.IsInteger != other.IsInteger {
    if p.IsInteger == nil || other.IsInteger == nil {
      return false
    }
    if (*p.IsInteger) != (*other.IsInteger) { return false }
  }
  return true
}

func (p *HyperParameter) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HyperParameter(%+v)", *p)
}

// Attributes:
//  - ObservationId
//  - ParameterSuggestions
//  - Metadata
type Suggestions struct {
  ObservationId string `thrift:"observationId,1" db:"observationId" json:"observationId"`
  ParameterSuggestions map[string]float64 `thrift:"parameterSuggestions,2" db:"parameterSuggestions" json:"parameterSuggestions"`
  Metadata map[string]string `thrift:"metadata,3" db:"metadata" json:"metadata"`
}

func NewSuggestions() *Suggestions {
  return &Suggestions{}
}


func (p *Suggestions) GetObservationId() string {
  return p.ObservationId
}

func (p *Suggestions) GetParameterSuggestions() map[string]float64 {
  return p.ParameterSuggestions
}

func (p *Suggestions) GetMetadata() map[string]string {
  return p.Metadata
}
func (p *Suggestions) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Suggestions)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ObservationId = v
}
  return nil
}

func (p *Suggestions)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]float64, size)
  p.ParameterSuggestions =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 float64
    if v, err := iprot.ReadDouble(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.ParameterSuggestions[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Suggestions)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Metadata =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.Metadata[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Suggestions) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Suggestions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Suggestions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "observationId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:observationId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ObservationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.observationId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:observationId: ", p), err) }
  return err
}

func (p *Suggestions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterSuggestions", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parameterSuggestions: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.ParameterSuggestions)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterSuggestions {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parameterSuggestions: ", p), err) }
  return err
}

func (p *Suggestions) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:metadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Metadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Metadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:metadata: ", p), err) }
  return err
}

func (p *Suggestions) Equals(other *Suggestions) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ObservationId != other.ObservationId { return false }
  if len(p.ParameterSuggestions) != len(other.ParameterSuggestions) { return false }
  for k, _tgt := range p.ParameterSuggestions {
    _src4 := other.ParameterSuggestions[k]
    if _tgt != _src4 { return false }
  }
  if len(p.Metadata) != len(other.Metadata) { return false }
  for k, _tgt := range p.Metadata {
    _src5 := other.Metadata[k]
    if _tgt != _src5 { return false }
  }
  return true
}

func (p *Suggestions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Suggestions(%+v)", *p)
}

type ParameterOptimizer interface {
  // Parameters:
  //  - Parameters
  //  - RunId
  //  - Restart
  Init(ctx context.Context, parameters []*HyperParameter, runId string, restart bool) (_err error)
  Suggest(ctx context.Context) (_r *Suggestions, _err error)
  // Parameters:
  //  - ObservationId
  //  - Value
  Observe(ctx context.Context, observationId string, value float64) (_err error)
}

type ParameterOptimizerClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewParameterOptimizerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ParameterOptimizerClient {
  return &ParameterOptimizerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewParameterOptimizerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ParameterOptimizerClient {
  return &ParameterOptimizerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewParameterOptimizerClient(c thrift.TClient) *ParameterOptimizerClient {
  return &ParameterOptimizerClient{
    c: c,
  }
}

func (p *ParameterOptimizerClient) Client_() thrift.TClient {
  return p.c
}

func (p *ParameterOptimizerClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ParameterOptimizerClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Parameters
//  - RunId
//  - Restart
func (p *ParameterOptimizerClient) Init(ctx context.Context, parameters []*HyperParameter, runId string, restart bool) (_err error) {
  var _args6 ParameterOptimizerInitArgs
  _args6.Parameters = parameters
  _args6.RunId = runId
  _args6.Restart = restart
  var _result8 ParameterOptimizerInitResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "init", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  return nil
}

func (p *ParameterOptimizerClient) Suggest(ctx context.Context) (_r *Suggestions, _err error) {
  var _args9 ParameterOptimizerSuggestArgs
  var _result11 ParameterOptimizerSuggestResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "suggest", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  if _ret12 := _result11.GetSuccess(); _ret12 != nil {
    return _ret12, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "suggest failed: unknown result")
}

// Parameters:
//  - ObservationId
//  - Value
func (p *ParameterOptimizerClient) Observe(ctx context.Context, observationId string, value float64) (_err error) {
  var _args13 ParameterOptimizerObserveArgs
  _args13.ObservationId = observationId
  _args13.Value = value
  var _result15 ParameterOptimizerObserveResult
  var _meta14 thrift.ResponseMeta
  _meta14, _err = p.Client_().Call(ctx, "observe", &_args13, &_result15)
  p.SetLastResponseMeta_(_meta14)
  if _err != nil {
    return
  }
  return nil
}

type ParameterOptimizerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ParameterOptimizer
}

func (p *ParameterOptimizerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ParameterOptimizerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ParameterOptimizerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewParameterOptimizerProcessor(handler ParameterOptimizer) *ParameterOptimizerProcessor {

  self16 := &ParameterOptimizerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["init"] = &parameterOptimizerProcessorInit{handler:handler}
  self16.processorMap["suggest"] = &parameterOptimizerProcessorSuggest{handler:handler}
  self16.processorMap["observe"] = &parameterOptimizerProcessorObserve{handler:handler}
return self16
}

func (p *ParameterOptimizerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x17.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x17

}

type parameterOptimizerProcessorInit struct {
  handler ParameterOptimizer
}

func (p *parameterOptimizerProcessorInit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ParameterOptimizerInitArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "init", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ParameterOptimizerInitResult{}
  if err2 = p.handler.Init(ctx, args.Parameters, args.RunId, args.Restart); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing init: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "init", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "init", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type parameterOptimizerProcessorSuggest struct {
  handler ParameterOptimizer
}

func (p *parameterOptimizerProcessorSuggest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ParameterOptimizerSuggestArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "suggest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ParameterOptimizerSuggestResult{}
  var retval *Suggestions
  if retval, err2 = p.handler.Suggest(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing suggest: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "suggest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "suggest", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type parameterOptimizerProcessorObserve struct {
  handler ParameterOptimizer
}

func (p *parameterOptimizerProcessorObserve) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ParameterOptimizerObserveArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "observe", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ParameterOptimizerObserveResult{}
  if err2 = p.handler.Observe(ctx, args.ObservationId, args.Value); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing observe: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "observe", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "observe", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Parameters
//  - RunId
//  - Restart
type ParameterOptimizerInitArgs struct {
  Parameters []*HyperParameter `thrift:"parameters,1" db:"parameters" json:"parameters"`
  RunId string `thrift:"runId,2" db:"runId" json:"runId"`
  Restart bool `thrift:"restart,3" db:"restart" json:"restart"`
}

func NewParameterOptimizerInitArgs() *ParameterOptimizerInitArgs {
  return &ParameterOptimizerInitArgs{}
}


func (p *ParameterOptimizerInitArgs) GetParameters() []*HyperParameter {
  return p.Parameters
}

func (p *ParameterOptimizerInitArgs) GetRunId() string {
  return p.RunId
}

func (p *ParameterOptimizerInitArgs) GetRestart() bool {
  return p.Restart
}
func (p *ParameterOptimizerInitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ParameterOptimizerInitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HyperParameter, 0, size)
  p.Parameters =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &HyperParameter{}
    if err := _elem18.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Parameters = append(p.Parameters, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ParameterOptimizerInitArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RunId = v
}
  return nil
}

func (p *ParameterOptimizerInitArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Restart = v
}
  return nil
}

func (p *ParameterOptimizerInitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "init_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ParameterOptimizerInitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parameters: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parameters {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parameters: ", p), err) }
  return err
}

func (p *ParameterOptimizerInitArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err) }
  return err
}

func (p *ParameterOptimizerInitArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "restart", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:restart: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Restart)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.restart (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:restart: ", p), err) }
  return err
}

func (p *ParameterOptimizerInitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ParameterOptimizerInitArgs(%+v)", *p)
}

type ParameterOptimizerInitResult struct {
}

func NewParameterOptimizerInitResult() *ParameterOptimizerInitResult {
  return &ParameterOptimizerInitResult{}
}

func (p *ParameterOptimizerInitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ParameterOptimizerInitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "init_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ParameterOptimizerInitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ParameterOptimizerInitResult(%+v)", *p)
}

type ParameterOptimizerSuggestArgs struct {
}

func NewParameterOptimizerSuggestArgs() *ParameterOptimizerSuggestArgs {
  return &ParameterOptimizerSuggestArgs{}
}

func (p *ParameterOptimizerSuggestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ParameterOptimizerSuggestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "suggest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ParameterOptimizerSuggestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ParameterOptimizerSuggestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ParameterOptimizerSuggestResult struct {
  Success *Suggestions `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewParameterOptimizerSuggestResult() *ParameterOptimizerSuggestResult {
  return &ParameterOptimizerSuggestResult{}
}

var ParameterOptimizerSuggestResult_Success_DEFAULT *Suggestions
func (p *ParameterOptimizerSuggestResult) GetSuccess() *Suggestions {
  if !p.IsSetSuccess() {
    return ParameterOptimizerSuggestResult_Success_DEFAULT
  }
return p.Success
}
func (p *ParameterOptimizerSuggestResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ParameterOptimizerSuggestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ParameterOptimizerSuggestResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Suggestions{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ParameterOptimizerSuggestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "suggest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ParameterOptimizerSuggestResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ParameterOptimizerSuggestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ParameterOptimizerSuggestResult(%+v)", *p)
}

// Attributes:
//  - ObservationId
//  - Value
type ParameterOptimizerObserveArgs struct {
  ObservationId string `thrift:"observationId,1" db:"observationId" json:"observationId"`
  Value float64 `thrift:"value,2" db:"value" json:"value"`
}

func NewParameterOptimizerObserveArgs() *ParameterOptimizerObserveArgs {
  return &ParameterOptimizerObserveArgs{}
}


func (p *ParameterOptimizerObserveArgs) GetObservationId() string {
  return p.ObservationId
}

func (p *ParameterOptimizerObserveArgs) GetValue() float64 {
  return p.Value
}
func (p *ParameterOptimizerObserveArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ParameterOptimizerObserveArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ObservationId = v
}
  return nil
}

func (p *ParameterOptimizerObserveArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ParameterOptimizerObserveArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "observe_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ParameterOptimizerObserveArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "observationId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:observationId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ObservationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.observationId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:observationId: ", p), err) }
  return err
}

func (p *ParameterOptimizerObserveArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *ParameterOptimizerObserveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ParameterOptimizerObserveArgs(%+v)", *p)
}

type ParameterOptimizerObserveResult struct {
}

func NewParameterOptimizerObserveResult() *ParameterOptimizerObserveResult {
  return &ParameterOptimizerObserveResult{}
}

func (p *ParameterOptimizerObserveResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ParameterOptimizerObserveResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "observe_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ParameterOptimizerObserveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ParameterOptimizerObserveResult(%+v)", *p)
}


