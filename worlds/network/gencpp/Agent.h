/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Agent_H
#define Agent_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "env_types.h"

namespace env {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AgentIf {
 public:
  virtual ~AgentIf() {}
  virtual void init(std::map<std::string, std::string> & _return, const Space& actionSpace, const Space& observationSpace) = 0;
  virtual void step(Actions& _return, const Observations& observations, const std::string& debug) = 0;
};

class AgentIfFactory {
 public:
  typedef AgentIf Handler;

  virtual ~AgentIfFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgentIf* /* handler */) = 0;
  };

class AgentIfSingletonFactory : virtual public AgentIfFactory {
 public:
  AgentIfSingletonFactory(const ::std::shared_ptr<AgentIf>& iface) : iface_(iface) {}
  virtual ~AgentIfSingletonFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(AgentIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<AgentIf> iface_;
};

class AgentNull : virtual public AgentIf {
 public:
  virtual ~AgentNull() {}
  void init(std::map<std::string, std::string> & /* _return */, const Space& /* actionSpace */, const Space& /* observationSpace */) override {
    return;
  }
  void step(Actions& /* _return */, const Observations& /* observations */, const std::string& /* debug */) override {
    return;
  }
};

typedef struct _Agent_init_args__isset {
  _Agent_init_args__isset() : actionSpace(false), observationSpace(false) {}
  bool actionSpace :1;
  bool observationSpace :1;
} _Agent_init_args__isset;

class Agent_init_args {
 public:

  Agent_init_args(const Agent_init_args&);
  Agent_init_args& operator=(const Agent_init_args&);
  Agent_init_args() noexcept {
  }

  virtual ~Agent_init_args() noexcept;
  Space actionSpace;
  Space observationSpace;

  _Agent_init_args__isset __isset;

  void __set_actionSpace(const Space& val);

  void __set_observationSpace(const Space& val);

  bool operator == (const Agent_init_args & rhs) const
  {
    if (!(actionSpace == rhs.actionSpace))
      return false;
    if (!(observationSpace == rhs.observationSpace))
      return false;
    return true;
  }
  bool operator != (const Agent_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_init_pargs {
 public:


  virtual ~Agent_init_pargs() noexcept;
  const Space* actionSpace;
  const Space* observationSpace;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_init_result__isset {
  _Agent_init_result__isset() : success(false) {}
  bool success :1;
} _Agent_init_result__isset;

class Agent_init_result {
 public:

  Agent_init_result(const Agent_init_result&);
  Agent_init_result& operator=(const Agent_init_result&);
  Agent_init_result() noexcept {
  }

  virtual ~Agent_init_result() noexcept;
  std::map<std::string, std::string>  success;

  _Agent_init_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const Agent_init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agent_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_init_presult__isset {
  _Agent_init_presult__isset() : success(false) {}
  bool success :1;
} _Agent_init_presult__isset;

class Agent_init_presult {
 public:


  virtual ~Agent_init_presult() noexcept;
  std::map<std::string, std::string> * success;

  _Agent_init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_step_args__isset {
  _Agent_step_args__isset() : observations(false), debug(false) {}
  bool observations :1;
  bool debug :1;
} _Agent_step_args__isset;

class Agent_step_args {
 public:

  Agent_step_args(const Agent_step_args&);
  Agent_step_args& operator=(const Agent_step_args&);
  Agent_step_args() noexcept
                  : debug() {
  }

  virtual ~Agent_step_args() noexcept;
  Observations observations;
  std::string debug;

  _Agent_step_args__isset __isset;

  void __set_observations(const Observations& val);

  void __set_debug(const std::string& val);

  bool operator == (const Agent_step_args & rhs) const
  {
    if (!(observations == rhs.observations))
      return false;
    if (!(debug == rhs.debug))
      return false;
    return true;
  }
  bool operator != (const Agent_step_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_step_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_step_pargs {
 public:


  virtual ~Agent_step_pargs() noexcept;
  const Observations* observations;
  const std::string* debug;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_step_result__isset {
  _Agent_step_result__isset() : success(false) {}
  bool success :1;
} _Agent_step_result__isset;

class Agent_step_result {
 public:

  Agent_step_result(const Agent_step_result&);
  Agent_step_result& operator=(const Agent_step_result&);
  Agent_step_result() noexcept {
  }

  virtual ~Agent_step_result() noexcept;
  Actions success;

  _Agent_step_result__isset __isset;

  void __set_success(const Actions& val);

  bool operator == (const Agent_step_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agent_step_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_step_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_step_presult__isset {
  _Agent_step_presult__isset() : success(false) {}
  bool success :1;
} _Agent_step_presult__isset;

class Agent_step_presult {
 public:


  virtual ~Agent_step_presult() noexcept;
  Actions* success;

  _Agent_step_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgentClient : virtual public AgentIf {
 public:
  AgentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AgentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void init(std::map<std::string, std::string> & _return, const Space& actionSpace, const Space& observationSpace) override;
  void send_init(const Space& actionSpace, const Space& observationSpace);
  void recv_init(std::map<std::string, std::string> & _return);
  void step(Actions& _return, const Observations& observations, const std::string& debug) override;
  void send_step(const Observations& observations, const std::string& debug);
  void recv_step(Actions& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AgentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (AgentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_step(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgentProcessor(::std::shared_ptr<AgentIf> iface) :
    iface_(iface) {
    processMap_["init"] = &AgentProcessor::process_init;
    processMap_["step"] = &AgentProcessor::process_step;
  }

  virtual ~AgentProcessor() {}
};

class AgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgentProcessorFactory(const ::std::shared_ptr< AgentIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< AgentIfFactory > handlerFactory_;
};

class AgentMultiface : virtual public AgentIf {
 public:
  AgentMultiface(std::vector<std::shared_ptr<AgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgentMultiface() {}
 protected:
  std::vector<std::shared_ptr<AgentIf> > ifaces_;
  AgentMultiface() {}
  void add(::std::shared_ptr<AgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void init(std::map<std::string, std::string> & _return, const Space& actionSpace, const Space& observationSpace) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init(_return, actionSpace, observationSpace);
    }
    ifaces_[i]->init(_return, actionSpace, observationSpace);
    return;
  }

  void step(Actions& _return, const Observations& observations, const std::string& debug) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->step(_return, observations, debug);
    }
    ifaces_[i]->step(_return, observations, debug);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AgentConcurrentClient : virtual public AgentIf {
 public:
  AgentConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AgentConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void init(std::map<std::string, std::string> & _return, const Space& actionSpace, const Space& observationSpace) override;
  int32_t send_init(const Space& actionSpace, const Space& observationSpace);
  void recv_init(std::map<std::string, std::string> & _return, const int32_t seqid);
  void step(Actions& _return, const Observations& observations, const std::string& debug) override;
  int32_t send_step(const Observations& observations, const std::string& debug);
  void recv_step(Actions& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
