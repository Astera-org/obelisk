#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Shape(object):
    """
    Attributes:
     - shape
     - stride
     - names

    """


    def __init__(self, shape=None, stride=None, names=None,):
        self.shape = shape
        self.stride = stride
        self.names = names

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.shape = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.shape.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.stride = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.stride.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.names = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.names.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Shape')
        if self.shape is not None:
            oprot.writeFieldBegin('shape', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.shape))
            for iter18 in self.shape:
                oprot.writeI32(iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stride is not None:
            oprot.writeFieldBegin('stride', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.stride))
            for iter19 in self.stride:
                oprot.writeI32(iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.names is not None:
            oprot.writeFieldBegin('names', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.names))
            for iter20 in self.names:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.shape is None:
            raise TProtocolException(message='Required field shape is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ETensor(object):
    """
    Attributes:
     - shape
     - values

    """


    def __init__(self, shape=None, values=None,):
        self.shape = shape
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.shape = Shape()
                    self.shape.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readDouble()
                        self.values.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ETensor')
        if self.shape is not None:
            oprot.writeFieldBegin('shape', TType.STRUCT, 1)
            self.shape.write(oprot)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.values))
            for iter27 in self.values:
                oprot.writeDouble(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.shape is None:
            raise TProtocolException(message='Required field shape is unset!')
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SpaceSpec(object):
    """
    Attributes:
     - shape
     - min
     - max
     - discreteLabels

    """


    def __init__(self, shape=None, min=None, max=None, discreteLabels=None,):
        self.shape = shape
        self.min = min
        self.max = max
        self.discreteLabels = discreteLabels

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.shape = Shape()
                    self.shape.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.discreteLabels = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.discreteLabels.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SpaceSpec')
        if self.shape is not None:
            oprot.writeFieldBegin('shape', TType.STRUCT, 1)
            self.shape.write(oprot)
            oprot.writeFieldEnd()
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.DOUBLE, 2)
            oprot.writeDouble(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.DOUBLE, 3)
            oprot.writeDouble(self.max)
            oprot.writeFieldEnd()
        if self.discreteLabels is not None:
            oprot.writeFieldBegin('discreteLabels', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.discreteLabels))
            for iter34 in self.discreteLabels:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Action(object):
    """
    Attributes:
     - actionShape
     - vector
     - discreteOption

    """


    def __init__(self, actionShape=None, vector=None, discreteOption=None,):
        self.actionShape = actionShape
        self.vector = vector
        self.discreteOption = discreteOption

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.actionShape = SpaceSpec()
                    self.actionShape.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.vector = ETensor()
                    self.vector.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.discreteOption = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Action')
        if self.actionShape is not None:
            oprot.writeFieldBegin('actionShape', TType.STRUCT, 1)
            self.actionShape.write(oprot)
            oprot.writeFieldEnd()
        if self.vector is not None:
            oprot.writeFieldBegin('vector', TType.STRUCT, 2)
            self.vector.write(oprot)
            oprot.writeFieldEnd()
        if self.discreteOption is not None:
            oprot.writeFieldBegin('discreteOption', TType.I32, 3)
            oprot.writeI32(self.discreteOption)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Shape)
Shape.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'shape', (TType.I32, None, False), None, ),  # 1
    (2, TType.LIST, 'stride', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'names', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ETensor)
ETensor.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'shape', [Shape, None], None, ),  # 1
    (2, TType.LIST, 'values', (TType.DOUBLE, None, False), None, ),  # 2
)
all_structs.append(SpaceSpec)
SpaceSpec.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'shape', [Shape, None], None, ),  # 1
    (2, TType.DOUBLE, 'min', None, None, ),  # 2
    (3, TType.DOUBLE, 'max', None, None, ),  # 3
    (4, TType.LIST, 'discreteLabels', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(Action)
Action.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'actionShape', [SpaceSpec, None], None, ),  # 1
    (2, TType.STRUCT, 'vector', [ETensor, None], None, ),  # 2
    (3, TType.I32, 'discreteOption', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
